// Generated by CoffeeScript 1.10.0
(function() {
  var UserStringGetter;

  require('es6-promise').polyfill();

  module.exports = UserStringGetter = (function() {
    UserStringGetter.prototype.ANONYMOUS = "(anonymous)";

    UserStringGetter.prototype.currentUserID = UserStringGetter.ANONYMOUS;

    UserStringGetter.prototype.zooniverseCurrentUserChecker = null;

    UserStringGetter.prototype.gettingIP = false;

    UserStringGetter.prototype.returnAnonymous = function() {
      return this.ANONYMOUS;
    };

    function UserStringGetter(zooniverseCurrentUserCheckerFunction, zooniverseCurrentUserCheckerFunctionParameter) {
      this.zooniverseCurrentUserCheckerFunction = zooniverseCurrentUserCheckerFunction;
      this.zooniverseCurrentUserCheckerFunctionParameter = zooniverseCurrentUserCheckerFunctionParameter;
      if (this.zooniverseCurrentUserCheckerFunction instanceof Function) {
        this.zooniverseCurrentUserChecker = this.zooniverseCurrentUserCheckerFunction;
        if (this.zooniverseCurrentUserCheckerFunctionParameter) {
          this.zooniverseCurrentUserCheckerParameter = this.zooniverseCurrentUserCheckerFunctionParameter;
        } else {
          this.zooniverseCurrentUserCheckerParameter = null;
        }
      } else {
        this.zooniverseCurrentUserChecker = this.returnAnonymous;
        this.zooniverseCurrentUserCheckerParameter = null;
      }
    }

    UserStringGetter.prototype.setCurrentUserIDFromCallback = function() {
      var userID;
      if (this.zooniverseCurrentUserChecker !== null && this.zooniverseCurrentUserChecker instanceof Function) {
        if (this.zooniverseCurrentUserCheckerParameter) {
          userID = this.zooniverseCurrentUserChecker(this.zooniverseCurrentUserCheckerParameter);
        } else {
          userID = this.zooniverseCurrentUserChecker();
        }
        if (userID !== null && userID !== this.ANONYMOUS) {
          this.currentUserID = userID;
          return true;
        }
      }
      return false;
    };

    UserStringGetter.prototype.forgetCurrentUserID = function() {
      return this.currentUserID = this.ANONYMOUS;
    };

    UserStringGetter.prototype.rememberCurrentUserID = function(newUserID) {
      return this.currentUserID = newUserID;
    };

    UserStringGetter.prototype.getUserID = function() {
      return new Promise((function(_this) {
        return function(resolve, reject) {
          if (_this.currentUserID && _this.currentUserID !== _this.ANONYMOUS) {
            return resolve(_this.currentUserID);
          } else {
            if (_this.setCurrentUserIDFromCallback()) {
              return resolve(_this.currentUserID);
            } else {
              return resolve(_this.ANONYMOUS);
            }
          }
        };
      })(this));
    };

    return UserStringGetter;

  })();

}).call(this);
