// Generated by CoffeeScript 1.10.0
(function() {
  var $, UserStringGetter,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  $ = require('jqueryify');

  module.exports = UserStringGetter = (function() {
    UserStringGetter.prototype.ANONYMOUS = "(anonymous)";

    UserStringGetter.prototype.currentUserID = UserStringGetter.ANONYMOUS;

    UserStringGetter.prototype.zooniverseCurrentUserChecker = null;

    UserStringGetter.prototype.gettingIP = false;

    UserStringGetter.prototype.returnAnonymous = function() {
      return this.ANONYMOUS;
    };

    function UserStringGetter(zooniverseCurrentUserCheckerFunction, zooniverseCurrentUserCheckerFunctionParameter) {
      this.zooniverseCurrentUserCheckerFunction = zooniverseCurrentUserCheckerFunction;
      this.zooniverseCurrentUserCheckerFunctionParameter = zooniverseCurrentUserCheckerFunctionParameter;
      this.getUserID = bind(this.getUserID, this);
      this.rememberCurrentUserID = bind(this.rememberCurrentUserID, this);
      this.forgetCurrentUserID = bind(this.forgetCurrentUserID, this);
      this.setCurrentUserIDFromCallback = bind(this.setCurrentUserIDFromCallback, this);
      this.returnAnonymous = bind(this.returnAnonymous, this);
      if (this.zooniverseCurrentUserCheckerFunction instanceof Function) {
        this.zooniverseCurrentUserChecker = this.zooniverseCurrentUserCheckerFunction;
        if (this.zooniverseCurrentUserCheckerFunctionParameter) {
          this.zooniverseCurrentUserCheckerParameter = this.zooniverseCurrentUserCheckerFunctionParameter;
        } else {
          this.zooniverseCurrentUserCheckerParameter = null;
        }
      } else {
        this.zooniverseCurrentUserChecker = this.returnAnonymous;
        this.zooniverseCurrentUserCheckerParameter = null;
      }
    }

    UserStringGetter.prototype.setCurrentUserIDFromCallback = function() {
      var userID;
      if (this.zooniverseCurrentUserChecker !== null && this.zooniverseCurrentUserChecker instanceof Function) {
        if (this.zooniverseCurrentUserCheckerParameter) {
          userID = this.zooniverseCurrentUserChecker(this.zooniverseCurrentUserCheckerParameter);
        } else {
          userID = this.zooniverseCurrentUserChecker();
        }
        if (userID !== null && userID !== this.ANONYMOUS) {
          this.currentUserID = userID;
          return true;
        }
      }
      return false;
    };

    UserStringGetter.prototype.forgetCurrentUserID = function() {
      return this.currentUserID = this.ANONYMOUS;
    };

    UserStringGetter.prototype.rememberCurrentUserID = function(newUserID) {
      return this.currentUserID = newUserID;
    };

    UserStringGetter.prototype.getUserID = function() {
      var eventualUserID;
      eventualUserID = new $.Deferred;
      if (this.currentUserID && this.currentUserID !== this.ANONYMOUS) {
        eventualUserID.resolve(this.currentUserID);
      } else {
        if (this.setCurrentUserIDFromCallback()) {
          eventualUserID.resolve(this.currentUserID);
        } else {
          eventualUserID.resolve(this.ANONYMOUS);
        }
      }
      return eventualUserID.promise();
    };

    return UserStringGetter;

  })();

}).call(this);
