// Generated by CoffeeScript 1.10.0
(function() {
  var $, UserStringGetter,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  $ = require('jqueryify');

  module.exports = UserStringGetter = (function() {
    UserStringGetter.prototype.ANONYMOUS = "(anonymous)";

    UserStringGetter.prototype.currentUserID = UserStringGetter.ANONYMOUS;

    UserStringGetter.prototype.zooniverseCurrentUserChecker = null;

    UserStringGetter.prototype.returnAnonymous = function() {
      return this.ANONYMOUS;
    };

    function UserStringGetter(zooniverseCurrentUserCheckerFunction1) {
      this.zooniverseCurrentUserCheckerFunction = zooniverseCurrentUserCheckerFunction1;
      this.getUserIDorIPAddress = bind(this.getUserIDorIPAddress, this);
      this.checkZooniverseCurrentUser = bind(this.checkZooniverseCurrentUser, this);
      this.returnAnonymous = bind(this.returnAnonymous, this);
      if (zooniverseCurrentUserCheckerFunction instanceof Function) {
        this.zooniverseCurrentUserChecker = zooniverseCurrentUserCheckerFunction;
      } else {
        this.zooniverseCurrentUserChecker = this.returnAnonymous;
      }
    }

    UserStringGetter.prototype.checkZooniverseCurrentUser = function() {
      var newValueForCurrentUser;
      if (this.zooniverseCurrentUserChecker !== null && this.zooniverseCurrentUserChecker instanceof Function && this.zooniverseCurrentUserChecker() !== null) {
        newValueForCurrentUser = this.zooniverseCurrentUserChecker();
        if (!!newValueForCurrentUser) {
          this.currentUserID = this.zooniverseCurrentUserChecker();
        } else {
          this.currentUserID = this.ANONYMOUS;
        }
      } else {
        this.currentUserID = this.ANONYMOUS;
      }
      return this.currentUserID;
    };

    UserStringGetter.prototype.getClientOrigin = function() {
      var eventualIP;
      eventualIP = new $.Deferred;
      $.get('https://api.ipify.org').then((function(_this) {
        return function(ip) {
          return eventualIP.resolve({
            ip: ip,
            address: ip
          });
        };
      })(this)).fail((function(_this) {
        return function() {
          return eventualIP.resolve({
            ip: '?.?.?.?',
            address: _this.ANONYMOUS
          });
        };
      })(this));
      return eventualIP.promise();
    };

    UserStringGetter.prototype.getNiceOriginString = function(data) {
      if ((data.ip != null) && (data.address != null)) {
        if (data.ip === '?.?.?.?') {
          return this.ANONYMOUS;
        } else if (data.ip === data.address) {
          return "(" + data.ip + ")";
        } else {
          return "(" + data.address + " [" + data.ip + "])";
        }
      } else {
        return this.ANONYMOUS;
      }
    };

    UserStringGetter.prototype.getUserIDorIPAddress = function() {
      var checkUserNow, eventualUserID;
      eventualUserID = new $.Deferred;
      if (this.zooniverseCurrentUserChecker !== null) {
        checkUserNow = this.checkZooniverseCurrentUser();
        if (checkUserNow && this.currentUserID !== checkUserNow) {
          eventualUserID.resolve(this.currentUserID);
        } else if ((this.currentUserID != null) && this.currentUserID !== this.ANONYMOUS) {
          eventualUserID.resolve(this.currentUserID);
        } else {
          this.getClientOrigin().then((function(_this) {
            return function(data) {
              if (data != null) {
                return _this.currentUserID = _this.getNiceOriginString(data);
              }
            };
          })(this)).always((function(_this) {
            return function() {
              return eventualUserID.resolve(_this.currentUserID);
            };
          })(this));
        }
      } else {
        eventualUserID.resolve(this.ANONYMOUS);
      }
      return eventualUserID.promise();
    };

    return UserStringGetter;

  })();

}).call(this);
